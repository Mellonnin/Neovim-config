-- base
("n") leader-s          find and replace all under cursor
("n") P                 paste before cursor
("n") N                 cerca termine precedente
("n") n                 cerca termine successivo
("n") J                 join linea sotto
("v") J                 sposta la riga sotto
("v") K                 sposta la riga sopra
("v") >>                sposta la riga a sinistra
("v") <<                sposta la riga a destra
("n") -                 ritorna al file explorer, nel file explorer va alla directory superiore
("n") U                 redo changes
("n") <tab>                 find the next bracket on this line matching or predecessor directive
("i") ctrl-o            in insert permette di avere un comando di normal solo una volta e poi ti porta in insert
("n") 0			        to the first character of the line. 
("n") _			        to the first non-blank character of the line.
("n") $	                salta alla fine della riga rimanendo in n-mode 
("n") gg		        move to the top of the file 
("n") G			        move to the bottom of the file 
("n") d	                delete one line
("n") D	                delete to the end of the line
("n") y/d/v n           delete/yank/highlight to the next search pattern match
("n") y/d/v N           delete/yank/highlight to the previous search pattern match

("n") y/d/v $           delete/yank/highlight/jump all after curcor (incluso)
("n") y/d/v 0           delete/yank/highlight/jump all before cursor (escluso)
("n") y/d/v F<char>     delete/yank/highlight/jump all before until <char> (incluso)
("n") y/d/v T<char>     delete/yank/highlight/jump all before until <char> (escluso)
("n") y/d/v f<char>     delete/yank/highlight/jump all after until <char> (incluso) 
("n") y/d/v t<char>     delete/yank/highlight/jump all after until <char> (escluso)
("n") y/d/v b           delete/yank/highlight/jump word/WORD before cursor (carattere su cui sto escluso)
("n") y/d/v w           delete/yank/highlight/jump word/WORD until next(incluso)
("n") y/d/v e           delete/yank/highlight/jump next word (incluso)
("n") y/d/v E           delete/yank/highlight/jump next WORD (incluso)
("n") y/d/v E           delete/yank/highlight/jump next WORD (incluso)
("n") m/M               delete/yank/highlight/jump move to the end of the previous word/WORD (incluso)
("n") x                 canc char 
("n") X                 delete char
("v") =                 indent highlighted 
("n") (			        sentences backward 
("n") )			        sentences forward
("n") {			        paragraphs backward
("n") }			        paragraphs forward 
("n") ]]		        sections forward or to the next "{" in the first column 
("n") ][		        sections forward or to the next '}' in the first column
("n") [[		       	sections backward or to the previous "{" in the first column
("n") []		       	sections backward or to the previous "}" in the first column
("n") _  		        lines upward, on the first non-blank character 
("n") +		            lines downward, on the first non-blank character 

When a motion is not of the type you would like to use, you can force another
type by using "v", "V" or CTRL-V just after the operator.
-- da vedere e cambiare
Example: > dj
deletes two lines > dvj
deletes from the cursor position until the character below the cursor > d<C-V>j
deletes the character under the cursor and the character below the cursor. >





--treesitter
("n")("v") d/c/y of     outer function 
("n")("v") d/c/y if     inner function
("n")("v") d/c/y os     outer class 
("n")("v") d/c/y is     inner class 
("n")("v") d/c/y ol     outer loop 
("n")("v") d/c/y il     inner loop 
("n")("v") d/c/y op     outer parameter 
("n")("v") d/c/y ip     inner parameter 
("n")("v") d/c/y oc     outer conditional 
("n")("v") d/c/y ic     inner conditional 
("n")("v") d/c/y a"     whole double quoted string
("n")("v") d/c/y i"		inner double quoted string 
("n")("v") d/c/y a'		whole single quoted string
("n")("v") d/c/y i'		inner single quoted string 
("n")("v") d/c/y a<		whole '<' to '>'
("n")("v") d/c/y i<		inner '<' to '>' 
("n")("v") d/c/y a`		whole string in backticks
("n")("v") d/c/y i`		inner string in backticks 
("n")("v") d/c/y aB		whole "{" to "}" 
("n")("v") d/c/y iB		inner "{" and "}"
("n")("v") d/c/y ab		whole "(" to ")"
("n")("v") d/c/y ib		inner "(" to ")"
("n")("v") d/c/y a[		whole '[' to ']'
("n")("v") d/c/y i[		inner '[' to ']' 
("n")("v") d/c/y ap		paragraph with white space
("n")("v") d/c/y ip		inner paragraph without white space
("n")("v") d/c/y as		whole sentence with white space
("n")("v") d/c/y is		inner sentence without white space
("n")("v") d/c/y at		whole tag block //for ml
("n")("v") d/c/y it		inner tag block
("n")("v") d/c/y aW		whole WORD with white space
("n")("v") d/c/y iW		inner WORD
("n")("v") d/c/y aw		whole word with white space
("n")("v") d/c/y iw		inner word

-- [[ word vs WORD
This "stuff" is not-so difficult!
wwww  wwwww  ww www ww wwwwwwwww  
WWWW WWWWWWW WW WWWWWW WWWWWWWWWW
]]

("n") ] + o/i/ + (f,s,c,l,p) goto_next_start 
("n") ] + (f,s,c,l,p) + o/i  goto_next_end 
("n") [ + o/i/ + (f,s,c,l,p) goto_previous_start
("n") [ + (f,s,c,l,p) + o/i  goto_previous_end 
("n") ' + o/i/ + (f,s,c,l,p) goto_next
("n") ' + (f,s,c,l,p) + o/i  goto_previous
